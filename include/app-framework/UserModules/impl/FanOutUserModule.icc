
template <typename DATA_TYPE>
appframework::FanOutUserModule<DATA_TYPE>::FanOutUserModule(
    std::shared_ptr<BufferOutput<DATA_TYPE>> inputBuffer,
    std::initializer_list<std::shared_ptr<BufferInput<DATA_TYPE>>> outputBuffers)
    : inputBuffer_(inputBuffer), mode_(FanOutMode::NotConfigured), bufferTimeout_(100), outputBuffers_(outputBuffers), thread_(std::bind(&FanOutUserModule<DATA_TYPE>::do_work, this)) {}

template <typename DATA_TYPE>
std::future<std::string> appframework::FanOutUserModule<DATA_TYPE>::execute_command(std::string cmd) {
    if (cmd == "configure" || cmd == "Configure") {
        return std::async(std::launch::async, [&] { return do_configure(); });
    }
    if (cmd == "start" || cmd == "Start") {
        return std::async(std::launch::async, [&] { return do_start(); });
    }
    if (cmd == "stop" || cmd == "Stop") {
        return std::async(std::launch::async, [&] { return do_stop(); });
    }

    return std::async(std::launch::async, [] { return std::string("Unrecognized Command"); });
}

template <typename DATA_TYPE>
std::string appframework::FanOutUserModule<DATA_TYPE>::do_configure() {
    // TODO: Get configuration from ConfigurationManager!
    mode_ = FanOutMode::RoundRobin;
    wait_interval_us_ = 1000000;

    return "Success";
}

template <typename DATA_TYPE>
std::string appframework::FanOutUserModule<DATA_TYPE>::do_start() {
    thread_.start_working_thread_();
    return "Success";
}

template <typename DATA_TYPE>
std::string appframework::FanOutUserModule<DATA_TYPE>::do_stop() {
    thread_.stop_working_thread_();
    return "Success";
}

template <typename DATA_TYPE>
void appframework::FanOutUserModule<DATA_TYPE>::do_work() {
    auto roundRobinNext = outputBuffers_.begin();

    while (thread_.thread_running()) {
        if (!inputBuffer_->empty()) {
            auto data = inputBuffer_->pop(bufferTimeout_);

            if (mode_ == FanOutMode::Broadcast) {
                do_broadcast(data);
            } else if (mode_ == FanOutMode::FirstAvailable) {
                auto sent = false;
                while (!sent) {
                    for (auto& o : outputBuffers_) {
                        if (!o->full()) {
                            o->push(std::move(data), bufferTimeout_);
                            sent = true;
                            break;
                        }
                    }
                    if (!sent) {
                        usleep(wait_interval_us_);
                    }
                }
            } else if (mode_ == FanOutMode::RoundRobin) {
                while (true) {
                    if (!(*roundRobinNext)->full()) {
                        (*roundRobinNext)->push(std::move(data), bufferTimeout_);

                        if (++roundRobinNext == outputBuffers_.end()) roundRobinNext = outputBuffers_.begin();
                        break;
                    } else {
                        usleep(wait_interval_us_);
                    }
                }
            }
        } else {
            usleep(wait_interval_us_);
        }
    }
}