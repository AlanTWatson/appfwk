#include "app-framework/UserModules/FanOutUserModule.hh"

#include <unistd.h>

template <typename DATA_TYPE>
appframework::FanOutUserModule<DATA_TYPE>::FanOutUserModule(
    std::shared_ptr<BufferOutput<DATA_TYPE>> inputBuffer,
    std::initializer_list<std::shared_ptr<BufferInput<DATA_TYPE>>> outputBuffers)
    : SinkUserModule<DATA_TYPE>(inputBuffer),
      ThreadedUserModule(),
      mode_(FanOutMode::NotConfigured),
      outputBuffers_(outputBuffers) {}

template <typename DATA_TYPE>
std::future<std::string> appframework::FanOutUserModule<DATA_TYPE>::execute_command(std::string cmd) {
    if (cmd == "configure" || cmd == "Configure") {
        return std::async(std::launch::async, [&] { return do_configure(); });
    }
    if (cmd == "start" || cmd == "Start") {
        return std::async(std::launch::async, [&] { return do_start(); });
    }
    if (cmd == "stop" || cmd == "Stop") {
        return std::async(std::launch::async, [&] { return do_stop(); });
    }

    return std::async(std::launch::async, [] { return std::string("Unrecognized Command"); });
}

template <typename DATA_TYPE>
std::string appframework::FanOutUserModule<DATA_TYPE>::do_configure() {
    // TODO: Get configuration from ConfigurationManager!
    mode_ = FanOutMode::RoundRobin;
    wait_interval_us_ = 1000000;

    return "Success";
}

template <typename DATA_TYPE>
std::string appframework::FanOutUserModule<DATA_TYPE>::do_start() {
    start_working_thread_();
    return "Success";
}

template <typename DATA_TYPE>
std::string appframework::FanOutUserModule<DATA_TYPE>::do_stop() {
    stop_working_thread_();
    return "Success";
}

template <typename DATA_TYPE>
void appframework::FanOutUserModule<DATA_TYPE>::do_work() {
    auto roundRobinNext = outputBuffers_.begin();

    while (thread_started_.load()) {
        auto data = SinkUserModule<DATA_TYPE>::inputBuffer_->pop();

        if (mode_ == FanOutMode::Broadcast) {
            for (auto& o : outputBuffers_) {
                o->push(std::vector<int>(data));
            }
        } else if (mode_ == FanOutMode::FirstAvailable) {
            auto sent = false;
            while (!sent) {
                for (auto& o : outputBuffers_) {
                    if (!o->full()) {
                        o->push(std::move(data));
                        sent = true;
                        break;
                    }
                }
                if (!sent) {
                    usleep(wait_interval_us_);
                }
            }
        } else if (mode_ == FanOutMode::RoundRobin) {
            while (true) {
                if (!(*roundRobinNext)->full()) {
                    (*roundRobinNext)->push(std::move(data));

                    if (++roundRobinNext == outputBuffers_.end()) roundRobinNext = outputBuffers_.begin();
                    break;
                } else {
                    usleep(wait_interval_us_);
                }
            }
        }
    }
}